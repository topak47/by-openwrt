# The default order of phy interfaces for H88K is
# eth1(2.5G) eth0(1G)
# swap to eth0(2.5G) eth1(1G)

. /lib/functions/uci-defaults.sh
. /lib/functions/system.sh

board_config_update

generate_mac()
{
        # https://gist.githubusercontent.com/aallan/b4bb86db86079509e6159810ae9bd3e4/raw/846ae1b646ab0f4d646af9115e47365f4118e5f6/mac-vendor.txt
        # The MAC address range registered by realtek manufacturers is as follows:
        local mac_grp_0="00:20:18:"
        local mac_grp_1="00:4f:49:"
        local mac_grp_2="00:60:52:"
        local mac_grp_3="00:e0:4c:"
        local mac_grp_4="52:54:00:"
        local mac_grp_5="52:54:ab:"
        local mac_grp_cnt=6

        # get the cpu/emmc/sd unique id
        local sd_hash
	local cpusn=$(cat /proc/cpuinfo | grep 'Serial' | awk '{print $3}')
	if [ -n "$cpusn" ];then
            sd_hash=$(echo $cpusn | sha256sum | cut -f1) 
        elif [ -f "/sys/class/block/mmcblk1/device/cid" ];then
            sd_hash=$(sha256sum /sys/class/block/mmcblk1/device/cid | cut -f1) 
	elif [ -f "/sys/class/block/mmcblk0/device/cid" ];then
            sd_hash=$(sha256sum /sys/class/block/mmcblk0/device/cid | cut -f1) 
	else
            sd_hash=$(dd if=/dev/zero bs=1 count=68 | sha256sum | cut -f1) 
	fi

        # get mac address head
        local dice=${mac_grp_cnt}$(echo $sd_hash | tr -d '[a-f]' | cut -b 1-6)
        local idx=$((dice % mac_grp_cnt))
        eval local mac_head="\$mac_grp_${idx}"

        # get mac address tail
        # sd_hash length: max 64
        local mac_tail=$(echo $sd_hash|cut -b 16-17)":"$(echo $sd_hash|cut -b 26-27)":"$(echo $sd_hash|cut -b 42-43)

        echo "${mac_head}${mac_tail}"
}

swap_interface()
{
	local eth_a=$1
	local eth_b=$2
	ip link set dev $eth_a down
	ip link set dev $eth_b down
	ip link set $eth_a name eth-rename-tmp
	ip link set $eth_b name $eth_a
	ip link set eth-rename-tmp name $eth_b
	ip link set dev $eth_a up
	ip link set dev $eth_b up
}

# Swap eth0 & eth1
gmac0_enabled="0"
ext_pcie_eth="0"
if [ -d "/sys/devices/platform/fe1b0000.ethernet" ];then
    gmac0_enabled=1
    if [ -d "/sys/devices/platform/fe1b0000.ethernet/net/eth0" ];then
        swap_interface "eth0" "eth1"
    fi
elif [ -d "/sys/class/pci_bus/0002:21/device/0002:21:00.0" ];then
    pcie2_class=$(cat "/sys/class/pci_bus/0002:21/device/0002:21:00.0/class")
    if [ "${pcie2_class}" == "0x020000" ];then
        ext_pcie_eth="1"
        if [ -d "/sys/devices/platform/fe170000.pcie/pci0002:20/0002:20:00.0/0002:21:00.0/net/eth0" ];then
            swap_interface "eth0" "eth1"
        fi
    fi
fi

json_is_a network object && exit 0

# Init LAN and WAN
LAN_MAC=$(generate_mac)
if [ ${gmac0_enabled} -eq 1 ] || [ ${ext_pcie_eth} -eq 1 ];then
    # if has two available nic
    ucidef_set_interfaces_lan_wan 'eth0' 'eth1'
    if [ ${ext_pcie_eth} -eq 1 ];then
        WAN_MAC=$(macaddr_add $LAN_MAC +1)
        ucidef_set_interface_macaddr "wan" $WAN_MAC
    fi
else 
    # only one nic
    ucidef_set_interfaces_lan_wan 'eth0'
fi

ucidef_set_interface_macaddr "lan" $LAN_MAC

board_config_flush

exit 0
